
# Script para Oracle

-- Tabla: PRODUCTOS
CREATE TABLE PRODUCTOS (
    CodProducto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(50) NOT NULL,
    Tipo VARCHAR2(20) NOT NULL CHECK (Tipo IN ('Menaje', 'Informática', 'Telefonía')),
    PrecioUnitario NUMBER(7, 2) NOT NULL CHECK (PrecioUnitario BETWEEN 0 AND 5000)
);

-- Tabla: CLIENTES
CREATE TABLE CLIENTES (
    DNI_Cliente VARCHAR2(10) PRIMARY KEY CHECK (REGEXP_LIKE(DNI_Cliente, '^[0-9]{8}-[A-Z]$')),
    Nombre VARCHAR2(50) NOT NULL,
    FechaAlta DATE NOT NULL CHECK (FechaAlta > TO_DATE('2019-12-31', 'YYYY-MM-DD')),
    País VARCHAR2(20) NOT NULL CHECK (País IN ('España', 'Italia', 'Francia'))
);

-- Tabla: VENTAS
CREATE TABLE VENTAS (
    CodProducto NUMBER REFERENCES PRODUCTOS(CodProducto),
    DNI_Cliente VARCHAR2(10) REFERENCES CLIENTES(DNI_Cliente),
    FechaVenta DATE NOT NULL,
    NumUnidades NUMBER NOT NULL,
    PRIMARY KEY (CodProducto, DNI_Cliente, FechaVenta)
);

-- Insertar datos en la tabla PRODUCTOS
INSERT INTO PRODUCTOS (CodProducto, Nombre, Tipo, PrecioUnitario) VALUES
(1, 'Platillo', 'Menaje', 10.00);
INSERT INTO PRODUCTOS (CodProducto, Nombre, Tipo, PrecioUnitario) VALUES
(2, 'ipad', 'Informática', 500.00);
INSERT INTO PRODUCTOS (CodProducto, Nombre, Tipo, PrecioUnitario) VALUES
(3, 'iphone', 'Telefonía', 100.00);

-- Insertar datos en la tabla CLIENTES
INSERT INTO CLIENTES (DNI_Cliente, Nombre, FechaAlta, País) VALUES
('12345678-A', 'Juan Pérez', TO_DATE('2024-01-01', 'YYYY-MM-DD'), 'España');

INSERT INTO CLIENTES (DNI_Cliente, Nombre, FechaAlta, País) VALUES
('87654321-B', 'María Gómez', TO_DATE('2024-02-01', 'YYYY-MM-DD'), 'Italia');

INSERT INTO CLIENTES (DNI_Cliente, Nombre, FechaAlta, País) VALUES
('13579246-C', 'Carlos Sánchez', TO_DATE('2024-03-01', 'YYYY-MM-DD'), 'Francia');

-- Insertar datos en la tabla VENTAS
INSERT INTO VENTAS (CodProducto, DNI_Cliente, FechaVenta, NumUnidades) VALUES
(1, '12345678-A', TO_DATE('2024-12-01', 'YYYY-MM-DD'), 2);
INSERT INTO VENTAS (CodProducto, DNI_Cliente, FechaVenta, NumUnidades) VALUES
(2, '87654321-B', TO_DATE('2024-11-29', 'YYYY-MM-DD'), 1);
INSERT INTO VENTAS (CodProducto, DNI_Cliente, FechaVenta, NumUnidades) VALUES
(3, '13579246-C', TO_DATE('2024-11-02', 'YYYY-MM-DD'), 3);


# Parte CONSULTAS SQL
1- Realizar una consulta que muestre el nombre del último producto que compró cada cliente que ha realizado alguna compra en los últimos diez días

SELECT c.Nombre, p.Nombre
FROM CLIENTES c
JOIN VENTAS v ON c.DNI_Cliente = v.DNI_Cliente
JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
WHERE v.FechaVenta >= SYSDATE - 10;

```
SQL> SELECT c.Nombre, p.Nombre
FROM CLIENTES c
JOIN VENTAS v ON c.DNI_Cliente = v.DNI_Cliente
JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
WHERE v.FechaVenta >= SYSDATE - 10;  2    3    4    5  

NOMBRE
--------------------------------------------------
NOMBRE
--------------------------------------------------
Juan P??rez
Plato

```




2- Realizar una consulta que muestre el importe total de las compras de productos de Tipo ‘Menaje’ para cada uno de los clientes junto con el nombre de dicho cliente incluyendo aquellos que no han comprado productos de ese tipo.

# En Oracle

SELECT c.Nombre, 
       COALESCE(SUM(p.PrecioUnitario * v.NumUnidades), 0) AS ImporteTotal
FROM CLIENTES c
LEFT JOIN VENTAS v ON c.DNI_Cliente = v.DNI_Cliente
LEFT JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto AND p.Tipo = 'Menaje'
GROUP BY c.Nombre;

```
SQL> SELECT c.Nombre, 
       COALESCE(SUM(p.PrecioUnitario * v.NumUnidades), 0) AS ImporteTotal
FROM CLIENTES c
LEFT JOIN VENTAS v ON c.DNI_Cliente = v.DNI_Cliente
LEFT JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto AND p.Tipo = 'Menaje'
GROUP BY c.Nombre;
  2    3    4    5    6  
NOMBRE						   IMPORTETOTAL
-------------------------------------------------- ------------
Juan P??rez						     20
Carlos S??nchez 					      0
Mar??a G??mez						      0

```


3- Realizar una vista llamada ‘Productos de Telefonía’ con los siguientes datos: Código del Producto, Nombre del Producto, Importe Total de las Ventas del Producto, Fecha de la última venta del producto y país del primer cliente que lo compró. En la vista solo deben aparecer los artículos de tipo ‘Telefonía’

# En Oracle

CREATE VIEW Productos_Cell AS
SELECT p.CodProducto, 
       p.Nombre, 
       SUM(v.NumUnidades * p.PrecioUnitario) AS ImporteTotal, 
       MAX(v.FechaVenta) AS FechaUltimaVenta, 
       c.País
FROM CLIENTES c
LEFT JOIN VENTAS v ON c.DNI_Cliente = v.DNI_Cliente
LEFT JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto AND p.Tipo = 'Telefonía'
GROUP BY p.CodProducto, p.Nombre, c.País;

# Que se vea la vista

SELECT * FROM Productos_Cell;

lo que da:

```
SQL> SELECT * FROM Productos_Cell;

CODPRODUCTO NOMBRE					       IMPORTETOTAL
----------- -------------------------------------------------- ------------
FECHAULT PA??S
-------- --------------------

	 Francia


01/12/24 Espa??a


	 Italia


```




4- Muestra los distintos tipos de productos junto al nombre del cliente que ha comprado más unidades de ese tipo de producto en los últimos diez años. 

# En Oracle

SELECT p.Tipo, c.Nombre
FROM PRODUCTOS p
JOIN VENTAS v ON p.CodProducto = v.CodProducto
JOIN CLIENTES c ON v.DNI_Cliente = c.DNI_Cliente
WHERE v.FechaVenta >= SYSDATE - 3650
GROUP BY p.Tipo, c.Nombre;

## Lo que muestra: 
```
SQL> SELECT p.Tipo, c.Nombre
FROM PRODUCTOS p
JOIN VENTAS v ON p.CodProducto = v.CodProducto
JOIN CLIENTES c ON v.DNI_Cliente = c.DNI_Cliente
WHERE v.FechaVenta >= SYSDATE - 3650
GROUP BY p.Tipo, c.Nombre;  2    3    4    5    6  

TIPO		     NOMBRE
-------------------- --------------------------------------------------
Menaje		     Juan P??rez

SQL> 

```

5- Realiza una consulta con operadores de conjuntos que nos diga qué artículos se han vendido tanto en enero como en febrero como en marzo.


SELECT p.Nombre
FROM PRODUCTOS p
WHERE p.CodProducto IN (
    SELECT v.CodProducto
    FROM VENTAS v
    WHERE TO_CHAR(v.FechaVenta, 'MM') = '01'
)
INTERSECT
SELECT p.Nombre
FROM PRODUCTOS p
WHERE p.CodProducto IN (
    SELECT v.CodProducto
    FROM VENTAS v
    WHERE TO_CHAR(v.FechaVenta, 'MM') = '02'
)
INTERSECT
SELECT p.Nombre
FROM PRODUCTOS p
WHERE p.CodProducto IN (
    SELECT v.CodProducto
    FROM VENTAS v
    WHERE TO_CHAR(v.FechaVenta, 'MM') = '03'
);

## Muestra por pantalla lo siguiente:

```
NOMBRE
--------------------------------------------------
Plato

```

# parte PL/SQL

Ejercicio 1- 

Realizar un procedimiento que reciba un tipo de producto, un mes y un año, 
y muestre un listado de todas las compras que se han realizado de productos de dicho tipo en dicho mes agrupadas por país y cliente con el siguiente formato:

```
Compras de Artículos de Tipo TipodeProducto
Mes: nn Año: n.nnn

País: NombrePais

	Cliente: NombreCliente

		CodProducto		FechaVenta		ImporteCompra
		CodProducto		FechaVenta		ImporteCompra
			.			.			.
			.			.			.
		CodProducto		FechaVenta		ImporteCompra

	Importe Total Cliente NombreCliente

	Cliente: NombreCliente
	...

Total Compras NombrePais: nnn

País: NombrePais

	Cliente: NombreCliente

		CodProducto		FechaVenta		ImporteCompra
		CodProducto		FechaVenta		ImporteCompra
			.			.			.
			.			.			.
		CodProducto		FechaVenta		ImporteCompra

	Importe Total Cliente NombreCliente

	Cliente: NombreCliente
	...

Total Compras NombrePais: nnn
...

Total Compras de Artículos de Tipo TipodeProducto: nn
```


-- Función para calcular el total de un cliente
CREATE OR REPLACE FUNCTION calcular_total_cliente(
    p_dni_cliente VARCHAR2,
    p_tipo VARCHAR2,
    p_mes NUMBER,
    p_anio NUMBER
) RETURN NUMBER IS
    v_total NUMBER := 0;
BEGIN
    SELECT NVL(SUM(v.NumUnidades * p.PrecioUnitario), 0)
    INTO v_total
    FROM VENTAS v
    JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
    WHERE v.DNI_Cliente = p_dni_cliente
    AND p.Tipo = p_tipo
    AND EXTRACT(MONTH FROM v.FechaVenta) = p_mes
    AND EXTRACT(YEAR FROM v.FechaVenta) = p_anio;
    
    RETURN v_total;
END;
/

-- Procedimiento para imprimir detalles de compras
CREATE OR REPLACE PROCEDURE imprimir_compras_cliente(
    p_dni_cliente VARCHAR2,
    p_tipo VARCHAR2,
    p_mes NUMBER,
    p_anio NUMBER
) IS
    CURSOR c_compras IS
        SELECT v.CodProducto, v.FechaVenta, 
               (v.NumUnidades * p.PrecioUnitario) as ImporteCompra
        FROM VENTAS v
        JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
        WHERE v.DNI_Cliente = p_dni_cliente
        AND p.Tipo = p_tipo
        AND EXTRACT(MONTH FROM v.FechaVenta) = p_mes
        AND EXTRACT(YEAR FROM v.FechaVenta) = p_anio;
BEGIN
    FOR r_compra IN c_compras LOOP
        DBMS_OUTPUT.PUT_LINE(CHR(9) || CHR(9) || 
            RPAD(r_compra.CodProducto, 15) ||
            RPAD(TO_CHAR(r_compra.FechaVenta, 'DD/MM/YYYY'), 15) ||
            TO_CHAR(r_compra.ImporteCompra, '999G999D99'));
    END LOOP;
END;
/

-- Procedimiento principal
CREATE OR REPLACE PROCEDURE informe_compras(
    p_tipo IN VARCHAR2,
    p_mes IN NUMBER,
    p_anio IN NUMBER
) IS
    v_total_general NUMBER := 0;
    v_total_pais NUMBER;
    v_total_cliente NUMBER;
    
    CURSOR c_paises IS
        SELECT DISTINCT País FROM CLIENTES ORDER BY País;
        
    CURSOR c_clientes(p_pais VARCHAR2) IS
        SELECT * FROM CLIENTES WHERE País = p_pais;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Compras de Artículos de Tipo ' || p_tipo || 
                        ' - Mes: ' || p_mes || ' Año: ' || p_anio);

    FOR r_pais IN c_paises LOOP
        v_total_pais := 0;
        DBMS_OUTPUT.PUT_LINE(CHR(10) || 'País: ' || r_pais.País);
        
        FOR r_cliente IN c_clientes(r_pais.País) LOOP
            v_total_cliente := calcular_total_cliente(r_cliente.DNI_Cliente, p_tipo, p_mes, p_anio);
            
            IF v_total_cliente > 0 THEN
                DBMS_OUTPUT.PUT_LINE(CHR(9) || 'Cliente: ' || r_cliente.Nombre);
                imprimir_compras_cliente(r_cliente.DNI_Cliente, p_tipo, p_mes, p_anio);
                DBMS_OUTPUT.PUT_LINE(CHR(9) || 'Total Cliente: ' || 
                    TO_CHAR(v_total_cliente, '999G999D99'));
                v_total_pais := v_total_pais + v_total_cliente;
            END IF;
        END LOOP;
        
        IF v_total_pais > 0 THEN
            DBMS_OUTPUT.PUT_LINE('Total País ' || r_pais.País || ': ' || 
                TO_CHAR(v_total_pais, '999G999D99'));
            v_total_general := v_total_general + v_total_pais;
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE(CHR(10) || 'Total General: ' || 
        TO_CHAR(v_total_general, '999G999D99'));
END;
/

## Lo que muestra:

```
SQL> SET SERVEROUTPUT ON;
SQL> EXEC informe_compras('Telefonía', 2, 2024);
Compras de Art??culos de Tipo Telefon??a - Mes: 2 A??o: 2024

Pa??s: Espa??a

Pa??s: Francia

Pa??s: Italia
	Cliente: Luis Mart??nez
		5	       25/02/2024	   400,00
	Total Cliente:	    400,00
Total Pa??s Italia:	 400,00

Total General:	    400,00

Procedimiento PL/SQL terminado correctamente.

```

Ejercicio 2- Realizar un trigger que cuando se inserte una venta mantenga correctamente actualizada la columna ProductoMasCaroComprado (que previamente has de crear y rellenar mediante un procedimiento) en la tabla Clientes.

CREATE OR REPLACE FUNCTION obtenerproductomascaro(
    p_dni_cliente VARCHAR2
) RETURN VARCHAR2 IS
    v_productomascaro VARCHAR2(50);
BEGIN
    
    SELECT p.Nombre
    INTO v_productomascaro
    FROM VENTAS v
    JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
    WHERE v.DNI_Cliente = p_dni_cliente
    AND (v.NumUnidades * p.PrecioUnitario) = (
        SELECT MAX(v2.NumUnidades * p2.PrecioUnitario)
        FROM VENTAS v2
        JOIN PRODUCTOS p2 ON v2.CodProducto = p2.CodProducto
        WHERE v2.DNI_Cliente = p_dni_cliente
    )
    FETCH FIRST 1 ROWS ONLY;

    RETURN vproductomascaro;
END;
/

CREATE OR REPLACE PROCEDURE actualizarproductomascarocliente(
    p_dni_cliente VARCHAR2
) IS
    v_productomascaro VARCHAR2(50);
BEGIN
    v_productomascaro := obtenerproductomascaro(p_dni_cliente);
        UPDATE CLIENTES
    SET ProductoMasCaroComprado = v_productomascaro
    WHERE DNI_Cliente = p_dni_cliente;

    COMMIT;
END;
/

CREATE OR REPLACE TRIGGER trg_actualizar_producto_mas_caro
AFTER INSERT ON VENTAS
FOR EACH ROW
BEGIN    
    actualizarproductomascarocliente(:NEW.DNI_Cliente);
END;
/

```
SQL> SELECT * FROM CLIENTES;

DNI_CLIENT NOMBRE					      FECHAALT
---------- -------------------------------------------------- --------
PA??S
--------------------
12345678-A Juan P??rez					      01/01/24
Espa??a

13579246-C Carlos S??nchez				      01/03/24
Francia

87654321-B Mar??a G??mez				      01/02/24
Italia


DNI_CLIENT NOMBRE					      FECHAALT
---------- -------------------------------------------------- --------
PA??S
--------------------
23456789-B Ana G??mez					      15/05/21
Francia

34567890-C Luis Mart??nez				      12/03/22
Italia
```

Ejercicio 3- Realiza los módulos de programación necesarios para asegurar que no se venden más de cinco productos de un mismo tipo en un mismo mes natural.

-- Función para contar las ventas de un tipo de producto en un mes específico
CREATE OR REPLACE FUNCTION contarventasmestipo(
    p_tipo_producto VARCHAR2,
    p_mes NUMBER,
    p_anio NUMBER
) RETURN NUMBER IS
    v_ventasmestipo NUMBER := 0;
BEGIN
    SELECT COUNT(*) 
    INTO v_ventasmestipo
    FROM VENTAS v
    JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
    WHERE p.Tipo = p_tipo_producto
    AND EXTRACT(MONTH FROM v.FechaVenta) = p_mes
    AND EXTRACT(YEAR FROM v.FechaVenta) = p_anio;

    RETURN v_ventasmestipo;
END;
/
-- Función para obtener el tipo de producto de una venta
CREATE OR REPLACE FUNCTION obtenertipoproducto(
    p_codproducto NUMBER
) RETURN VARCHAR2 IS
    v_tipoproducto VARCHAR2(50);
BEGIN
    SELECT p.Tipo INTO v_tipoproducto
    FROM PRODUCTOS p
    WHERE p.CodProducto = p_codproducto;

    RETURN v_tipoproducto;
END;
/

-- Procedimiento para verificar si se excede el límite de ventas
CREATE OR REPLACE PROCEDURE verificarlimiteventas(
    p_codproducto NUMBER,
    p_fecha_venta DATE
) IS
    v_tipoproducto VARCHAR2(50);
    v_ventasmestipo NUMBER;
    v_mes NUMBER := EXTRACT(MONTH FROM p_fecha_venta);
    v_anio NUMBER := EXTRACT(YEAR FROM p_fecha_venta);
BEGIN
    v_tipoproducto := obtenertipoproducto(p_codproducto);
    
    v_ventasmestipo := contarventasmestipo(v_tipoproducto, v_mes, v_anio);


    IF v_ventasmestipo >= 5 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Límite de 5 productos del tipo ' || v_tipoproducto || ' alcanzado en el mes ' || TO_CHAR(p_fecha_venta, 'MM/YYYY'));
    END IF;
END;
/

-- Trigger para verificar el límite de ventas antes de insertar una venta
CREATE OR REPLACE TRIGGER trgverificarlimiteventas
BEFORE INSERT ON VENTAS
FOR EACH ROW
BEGIN
    verificarlimiteventas(:NEW.CodProducto, :NEW.FechaVenta);
END;
/


```
SQL> INSERT INTO VENTAS (CodProducto, DNI_Cliente, FechaVenta, NumUnidades)
VALUES (1, '87654321-B', '2024-01-25', 1);
  2  INSERT INTO VENTAS (CodProducto, DNI_Cliente, FechaVenta, NumUnidades)
            *
ERROR en linea 1:
ORA-20001: Límite de 5 productos del tipo 'Menaje' alcanzado en el mes 01/2024


SQL> INSERT INTO VENTAS (CodProducto, DNI_Cliente, FechaVenta, NumUnidades)
VALUES (2, '12345678-A', '2020-02-05', 1);

SQL> SELECT * FROM VENTAS;

CODPRODUCTO DNI_CLIENT FECHAVEN NUMUNIDADES
----------- ---------- -------- -----------
	  1 12345678-A 01/12/24 	  2
	  1 12345678-A 10/01/24 	  2
	  2 23456789-B 15/01/24 	  1
	  3 34567890-C 20/01/24 	  3
	  1 12345678-A 05/02/24 	  1
	  5 34567890-C 25/02/24 	  4
	  2 12345678-A 03/03/24 	  1
	  1 34567890-C 18/03/24 	  5
	  2 12345678-A 25/01/24 	  1
8 filas seleccionadas.

```