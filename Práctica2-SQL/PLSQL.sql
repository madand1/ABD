# Script para PostgreSQL

-- Tabla: PRODUCTOS
CREATE TABLE PRODUCTOS (
    CodProducto SERIAL PRIMARY KEY,
    Nombre VARCHAR(20) NOT NULL,
    Tipo VARCHAR(15) NOT NULL CHECK (Tipo IN ('Menaje', 'Informática', 'Telefonía')),
    PrecioUnitario NUMERIC(7, 2) NOT NULL CHECK (PrecioUnitario BETWEEN 0 AND 5000)
);

-- Tabla: CLIENTES
CREATE TABLE CLIENTES (
    DNI_Cliente VARCHAR(10) PRIMARY KEY CHECK (DNI_Cliente ~ '^[0-9]{8}-[A-Z]$'),
    Nombre VARCHAR(20) NOT NULL,
    FechaAlta DATE NOT NULL CHECK (FechaAlta > '2019-12-31'),
    País VARCHAR(20) NOT NULL CHECK (País IN ('España', 'Italia', 'Francia'))
);

-- Tabla: VENTAS
CREATE TABLE VENTAS (
    CodProducto INT REFERENCES PRODUCTOS(CodProducto),
    DNI_Cliente VARCHAR(10) REFERENCES CLIENTES(DNI_Cliente),
    FechaVenta DATE NOT NULL,
    NumUnidades INT NOT NULL,
    PRIMARY KEY (CodProducto, DNI_Cliente, FechaVenta)
);

-- Insertar datos en la tabla PRODUCTOS
INSERT INTO PRODUCTOS (Nombre, Tipo, PrecioUnitario) VALUES
('Plato', 'Menaje', 10.00),
('Ordenador', 'Informática', 500.00),
('Teléfono', 'Telefonía', 100.00);

-- Insertar datos en la tabla CLIENTES
INSERT INTO CLIENTES (DNI_Cliente, Nombre, FechaAlta, País) VALUES
('12345678-A', 'Juan Pérez', '2020-01-01', 'España'),
('87654321-B', 'María Gómez', '2020-02-01', 'Italia'),
('13579246-C', 'Carlos Sánchez', '2020-03-01', 'Francia');

-- Insertar datos en la tabla VENTAS
INSERT INTO VENTAS (CodProducto, DNI_Cliente, FechaVenta, NumUnidades) VALUES
(1, '12345678-A', '2020-01-02', 2),
(2, '87654321-B', '2020-02-02', 1),
(3, '13579246-C', '2020-03-02', 3);


# Script para Oracle

-- Tabla: PRODUCTOS
CREATE TABLE PRODUCTOS (
    CodProducto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nombre VARCHAR2(20) NOT NULL,
    Tipo VARCHAR2(15) NOT NULL CHECK (Tipo IN ('Menaje', 'Informática', 'Telefonía')),
    PrecioUnitario NUMBER(7, 2) NOT NULL CHECK (PrecioUnitario BETWEEN 0 AND 5000)
);

-- Tabla: CLIENTES
CREATE TABLE CLIENTES (
    DNI_Cliente VARCHAR2(10) PRIMARY KEY CHECK (REGEXP_LIKE(DNI_Cliente, '^[0-9]{8}-[A-Z]$')),
    Nombre VARCHAR2(20) NOT NULL,
    FechaAlta DATE NOT NULL CHECK (FechaAlta > TO_DATE('2019-12-31', 'YYYY-MM-DD')),
    País VARCHAR2(20) NOT NULL CHECK (País IN ('España', 'Italia', 'Francia'))
);

-- Tabla: VENTAS
CREATE TABLE VENTAS (
    CodProducto NUMBER REFERENCES PRODUCTOS(CodProducto),
    DNI_Cliente VARCHAR2(10) REFERENCES CLIENTES(DNI_Cliente),
    FechaVenta DATE NOT NULL,
    NumUnidades NUMBER NOT NULL,
    PRIMARY KEY (CodProducto, DNI_Cliente, FechaVenta)
);

-- Insertar datos en la tabla PRODUCTOS
INSERT INTO PRODUCTOS (Nombre, Tipo, PrecioUnitario) VALUES
('Plato', 'Menaje', 10.00),
('Ordenador', 'Informática', 500.00),
('Teléfono', 'Telefonía', 100.00);

-- Insertar datos en la tabla CLIENTES
INSERT INTO CLIENTES (DNI_Cliente, Nombre, FechaAlta, País) VALUES
('12345678-A', 'Juan Pérez', TO_DATE('2020-01-01', 'YYYY-MM-DD'), 'España'),
('87654321-B', 'María Gómez', TO_DATE('2020-02-01', 'YYYY-MM-DD'), 'Italia'),
('13579246-C', 'Carlos Sánchez', TO_DATE('2020-03-01', 'YYYY-MM-DD'), 'Francia');

-- Insertar datos en la tabla VENTAS
INSERT INTO VENTAS (CodProducto, DNI_Cliente, FechaVenta, NumUnidades) VALUES
(1, '12345678-A', TO_DATE('2020-01-02', 'YYYY-MM-DD'), 2),
(2, '87654321-B', TO_DATE('2020-02-02', 'YYYY-MM-DD'), 1),
(3, '13579246-C', TO_DATE('2020-03-02', 'YYYY-MM-DD'), 3);


# Parte CONSULTAS SQL
1- Realizar una consulta que muestre el nombre del último producto que compró cada cliente que ha realizado alguna compra en los últimos diez días

SELECT c.Nombre, p.Nombre
FROM CLIENTES c
JOIN VENTAS v ON c.DNI_Cliente = v.DNI_Cliente
JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
WHERE v.FechaVenta >= SYSDATE - 10;

# En PostgreSQL

SELECT c.Nombre AS Cliente, p.Nombre AS Producto
FROM CLIENTES c
JOIN VENTAS v ON c.DNI_Cliente = v.DNI_Cliente
JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
WHERE v.FechaVenta >= CURRENT_DATE - INTERVAL '10 days';


2- Realizar una consulta que muestre el importe total de las compras de productos de Tipo ‘Menaje’ para cada uno de los clientes junto con el nombre de dicho cliente incluyendo aquellos que no han comprado productos de ese tipo.

# En Oracle

SELECT c.Nombre, SUM(p.PrecioUnitario * v.NumUnidades) AS ImporteTotal
FROM CLIENTES c
LEFT JOIN VENTAS v ON c.DNI_Cliente = v.DNI_Cliente
LEFT JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
WHERE p.Tipo = 'Menaje'
GROUP BY c.Nombre;

# En PostgreSQL

SELECT c.Nombre, SUM(p.PrecioUnitario * v.NumUnidades) AS ImporteTotal
FROM CLIENTES c
LEFT JOIN VENTAS v ON c.DNI_Cliente = v.DNI_Cliente
LEFT JOIN PRODUCTOS p ON v.CodProducto = p.CodProducto
WHERE p.Tipo = 'Menaje'
GROUP BY c.Nombre;

3- Realizar una vista llamada ‘Productos de Telefonía’ con los siguientes datos: Código del Producto, Nombre del Producto, Importe Total de las Ventas del Producto, Fecha de la última venta del producto y país del primer cliente que lo compró. En la vista solo deben aparecer los artículos de tipo ‘Telefonía’

# En Oracle

CREATE VIEW Productos_Telefonia AS
SELECT p.CodProducto, p.Nombre, SUM(v.NumUnidades * p.PrecioUnitario) AS ImporteTotal, MAX(v.FechaVenta) AS FechaUltimaVenta, c.País
FROM PRODUCTOS p
JOIN VENTAS v ON p.CodProducto = v.CodProducto
JOIN CLIENTES c ON v.DNI_Cliente = c.DNI_Cliente
WHERE p.Tipo = 'Telefonía'
GROUP BY p.CodProducto, p.Nombre, c.País;

# Que se vea la vista

SELECT * FROM Productos_Telefonia;


# En PostgreSQL

CREATE VIEW Productos_Telefonia AS
SELECT p.CodProducto, p.Nombre, SUM(v.NumUnidades * p.PrecioUnitario) AS ImporteTotal, MAX(v.FechaVenta) AS FechaUltimaVenta, c.País
FROM PRODUCTOS p
JOIN VENTAS v ON p.CodProducto = v.CodProducto
JOIN CLIENTES c ON v.DNI_Cliente = c.DNI_Cliente
WHERE p.Tipo = 'Telefonía'
GROUP BY p.CodProducto, p.Nombre, c.País;

# Que se vea la vista

SELECT * FROM Productos_Telefonia;



4- Muestra los distintos tipos de productos junto al nombre del cliente que ha comprado más unidades de ese tipo de producto en los últimos diez años. 

# En Oracle

SELECT p.Tipo, c.Nombre
FROM PRODUCTOS p
JOIN VENTAS v ON p.CodProducto = v.CodProducto
JOIN CLIENTES c ON v.DNI_Cliente = c.DNI_Cliente
WHERE v.FechaVenta >= SYSDATE - 3650
GROUP BY p.Tipo, c.Nombre;

# En PostgreSQL


SELECT p.Tipo, c.Nombre
FROM PRODUCTOS p
JOIN VENTAS v ON p.CodProducto = v.CodProducto
JOIN CLIENTES c ON v.DNI_Cliente = c.DNI_Cliente
WHERE v.FechaVenta >= CURRENT_DATE - INTERVAL '3650 days'
GROUP BY p.Tipo, c.Nombre;



5- Realiza una consulta con operadores de conjuntos que nos diga qué artículos se han vendido tanto en enero como en febrero como en marzo.

# En Oracle 

SELECT p.Nombre
FROM PRODUCTOS p
WHERE p.CodProducto IN (
    SELECT v.CodProducto
    FROM VENTAS v
    WHERE TO_CHAR(v.FechaVenta, 'MM') IN ('01', '02', '03')
); 

# En PostgreSQL 

SELECT p.Nombre
FROM PRODUCTOS p
WHERE p.CodProducto IN (
    SELECT v.CodProducto
    FROM VENTAS v
    WHERE TO_CHAR(v.FechaVenta, 'MM') IN ('01', '02', '03')
); 

